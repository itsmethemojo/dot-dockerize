# use task name grouping
# remove any expensive container usage from vars initialization
# move run.sh into taskfile
# use buildpack:: grouping for public targets
# group directory_vars in DIRECTORY_

#.dckrz



version: '2'

expansions: 5

vars:
  GIT_REPOSITORY: 'https://github.com/itsmethemojo/buildpack.git'
  API_TAGS: 'https://api.github.com/repos/itsmethemojo/buildpack/tags'
  DIRECTORY_DCKRZ: .dckrz
  DIRECTORY_DCKRZ_TMP: "{{.DIRECTORY_DCKRZ}}/tmp"
  DIRECTORY_CONFIG: "{{.DIRECTORY_DCKRZ}}/config"
  DIRECTORY_SCRIPTS: "{{.DIRECTORY_DCKRZ}}/scripts"
  FILE_BASH_SCRIPT_TEMPLATE: "{{.DIRECTORY_DCKRZ_TMP}}/bash/templates/run-task.sh"
  FILE_TARGET_TEMPLATE: "{{.DIRECTORY_DCKRZ_TMP}}/taskfiles/templates/target-to-run-task.yml"
  TEST_MODE:
    sh: >-
      if [ -f "../tests.bats" ]; then
      echo 1;
      else
      echo 0;
      fi;
  DCKRZ_VERSION:
    sh: >-
      DCKRZ_VERSION=$VERSION;
      if [ "$DCKRZ_VERSION" == "" ]; then
        DCKRZ_VERSION="$(grep -e "^#DCKRZ_VERSION:" Taskfile.yml 2>/dev/null | grep -o -e '[^:]*$')";
      fi;
      if [ "$DCKRZ_VERSION" == "" ] && [ ! -f "../tests.bats" ]; then
        DCKRZ_VERSION=$(docker run buildpack-deps:curl bash -c 'curl -s https://api.github.com/repos/itsmethemojo/buildpack/tags | grep "\"name\":" | head -1 | cut -d":" -f2 | cut -d"\"" -f2');
      fi;
      echo $DCKRZ_VERSION;
  ABSOLUTE_PROJECT_ROOT:
    sh: "pwd"
  PROJECT_FOLDER_NAME:
    sh: "echo ${PWD##*/}"
  TESTS_OUTPUT_FILE:
    sh: echo tests/output-$(date +%s).log;

tasks:

  add:
    desc: name=new-task-name task add                       adds a new task that can be later used with task new-task-name
    deps: [ _check_init_needed ]
    cmds:
      - task: _create_task_script
      - task: _update:taskfile
      - task: _print_version

  buildpack_test:
    desc: '[VERSION=version] task buildpack_test             runs tests for builpack framework, optional parameter to select a specific version to test'
    cmds:
      - cmd: ./tests/run.sh | tee {{.TESTS_OUTPUT_FILE}};
        ignore_error: true
        silent: true

  init:
    desc: '[VERSION=version] task init                       setup initial config and downloads needed dependencies, optional parameter to select a specific version'
    cmds:
      - task: _init:download
      - task: _init:create_config_files
      - task: _init:update_gitignore
      - task: _update:taskfile
      - task: _print_version

  upgrade:
    deps: [ _check_init_needed ]
    desc: task upgrade                                      will upgrade your DCKRZE version to the most current available
    cmds:
      - cmd: >-
          NEWEST_VERSION=$(docker run buildpack-deps:curl bash -c 'curl -s {{.API_TAGS}} | grep "\"name\":" | head -1 | cut -d":" -f2 | cut -d"\"" -f2');
          if [ "$NEWEST_VERSION" == "{{.DCKRZ_VERSION}}" ]; then
            echo 'DCKRZE is already on the newest version';
          else
            VERSION=$NEWEST_VERSION task init
          fi
        silent: true

  version:
    desc: task version                                     prints the current used version of task
    deps: [ _check_init_needed ]
    cmds:
      - task: _print_version

  # private targets

  _check_init_needed:
    cmds:
      - cmd: >-
          if [ ! -f "{{.FILE_BASH_SCRIPT_TEMPLATE}}" ]; then
            echo 'Important files missing. DCKRZE seems not be installed. Run "task init" to fix that.';
            exit 1;
          fi
        silent: true

  _init:create_config_files:
    cmds:
      - cmd: >-
          mkdir -p {{.DIRECTORY_CONFIG}}/docker;
          touch {{.DIRECTORY_CONFIG}}/tasks.env
        silent: true

  _create_task_script:
    cmds:
      - cmd: >-
          if [ "$name" == "" ]; then
            echo 'missing Parameter name! Usage: name="my-task" task add';
            exit 1;
          fi;
          mkdir -p {{.DIRECTORY_SCRIPTS}};
          touch {{.DIRECTORY_SCRIPTS}}/{{.name}}.sh;
          chmod +x {{.DIRECTORY_SCRIPTS}}/{{.name}}.sh;
          cat {{.FILE_BASH_SCRIPT_TEMPLATE}} >> {{.DIRECTORY_SCRIPTS}}/{{.name}}.sh
        silent: true

  _init:download:
    cmds:
      - cmd: >-
          rm -rf {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}};
          mkdir -p {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}};
          if [ {{.TEST_MODE}} -eq 1 ] && [ "{{.DCKRZ_VERSION}}" == "" ];
          then
          cp -R {{.ABSOLUTE_PROJECT_ROOT}}/../../taskfiles {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}}/;
          cp -R {{.ABSOLUTE_PROJECT_ROOT}}/../../bash {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}}/;
          cp {{.ABSOLUTE_PROJECT_ROOT}}/../../Taskfile.yml {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}}/Taskfile.yml;
          else
          docker run -v {{.ABSOLUTE_PROJECT_ROOT}}/{{.DIRECTORY_DCKRZ_TMP}}:/downloads buildpack-deps
          bash -c "
          git clone -b {{.DCKRZ_VERSION}} --depth 1 {{.GIT_REPOSITORY}} /downloads &> /dev/null &&
          rm -r /downloads/.git &&
          chmod -R 777 /downloads
          ";
          fi;
        silent: true

  _print_version:
    cmds:
      - cmd: >-
          echo DCKRZE Version: {{.DCKRZ_VERSION}};
        silent: true

  _script:run:
    cmds:
      - cmd: >-
          ls {{.DIRECTORY_DCKRZ_TMP}}/;
          if [ "{{.DOCKERFILE_PATH}}" != "" ]; then
            docker build -t {{.CONTAINER_NAME}} -f "{{.DOCKERFILE_PATH}}" $(dirname "{{.DOCKERFILE_PATH}}");
          fi;
          if [ -f "/.dockerenv" ]; then
            bash {{.PATH_IN_CONTAINER}}/{{.FILE_SCRIPT}};
          else
            docker run {{.CONTAINER_MOUNT_PARAMETERS}} -w {{.PATH_IN_CONTAINER}} {{.CONTAINER_NAME}} bash {{.FILE_SCRIPT}};
          fi;
        silent: true
    vars:
      FILE_CONFIG: "{{.DIRECTORY_CONFIG}}/tasks.env"
      FILE_SCRIPT: "{{.DIRECTORY_SCRIPTS}}/{{.name}}.sh"
      DEFAULT_CONTAINER: "buildpack-deps"
      PATH_IN_CONTAINER: "/container-{{.name}}"
      CONTAINER_MOUNT_PARAMETERS: "-v $(pwd):{{.PATH_IN_CONTAINER}}"
      CONTAINER_NAME:
        sh: >-
          CONFIG_FILE=.dckrz/config/tasks.env
          RETURN_CONTAINER_NAME=buildpack-deps;
          if [ "$(grep -e "^{{.name}}_container=" $CONFIG_FILE 2>/dev/null | grep -o -e '[^=]*$')" != "" ]; then
            RETURN_CONTAINER_NAME="$(grep -e "^{{.name}}_container=" $CONFIG_FILE 2>/dev/null | grep -o -e '[^=]*$')";
          fi;
          if [ "$(grep -e "^{{.name}}_dockerfile=" $CONFIG_FILE 2>/dev/null | grep -o -e '[^=]*$')" != "" ]; then
            RETURN_CONTAINER_NAME="dckrz-{{.PROJECT_FOLDER_NAME}}-{{.name}}";
          fi;
          echo $RETURN_CONTAINER_NAME;
      DOCKERFILE_PATH:
        sh: >-
          echo "$(grep -e "^{{.name}}_dockerfile=" .dckrz/config/tasks.env 2>/dev/null | grep -o -e '[^=]*$')";

  _script:start_watch:
    cmds:
      - cmd: >-
          echo $(date +%s) > {{.DIRECTORY_DCKRZ_TMP}}/start-watch-{{.name}}
        silent: true

  _script:stop_watch:
    cmds:
      - cmd: >-
          echo -e "\nDuration: $(( $(date +%s) - $( cat {{.DIRECTORY_DCKRZ_TMP}}/start-watch-{{.name}} ) ))s" &&
          rm {{.DIRECTORY_DCKRZ_TMP}}/start-watch-{{.name}}
        silent: true

  _init:update_gitignore:
    cmds:
      - cmd: >-
          if [ ! -f .gitignore ]; then
            echo "/{{.DIRECTORY_DCKRZ_TMP}}"/ > .gitignore;
          fi;
          if [ "$(grep "/{{.DIRECTORY_DCKRZ_TMP}}/" .gitignore | wc -l)" = "0" ]; then
            echo "/{{.DIRECTORY_DCKRZ_TMP}}/" >> .gitignore;
          fi
        silent: true

  _update:taskfile:
    cmds:
      - cmd: >-
          echo -e "#DCKRZ_VERSION: {{.DCKRZ_VERSION}}\n" > Taskfile.yml &&
          cat {{.DIRECTORY_DCKRZ_TMP}}/Taskfile.yml >> Taskfile.yml;
          for SCRIPT_FILE in $(ls -1 {{.DIRECTORY_SCRIPTS}} 2>/dev/null | sed -e 's/\..*$//'); do
          cat {{.FILE_TARGET_TEMPLATE}} | sed "s/__TASKNAME__/$SCRIPT_FILE/g" >> Taskfile.yml;
          done;
        silent: true
